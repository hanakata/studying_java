オブジェクト指向言語とはクラスの概念に加え以下の機能を持つ。
・カプセル化
・継承
・ポリモーフィズム

まず継承とはあるクラスの機能を別のクラスが引き継ぐ仕組みのこと。
つまりあるクラスのメンバーを別のクラスで引き継ぐことが出来る。
継承元をスーパークラス、継承するクラスをサブクラスと呼ぶ。

スーパークラスと同じメソッドをサブクラスで定義することが出来る。
これをメソッドのオーバーライトと呼ぶ。

superキーワードとは親クラスの参照を表す暗黙的な変数のこと。
これを使うことでスーパークラスのメンバに明示的にアクセスすることが出来る。

クラスメソッドにfinalを付けると継承を禁止できる。
メソッドやフィールドとは違い、コンストラクタは継承されない。

インターフェイスとはメソッドのシグネチャのみを定義したもの。
インターフェイスを定義していることで別のファイルから呼び出す際に
その定義したインターフェイスに値を渡すことで処理を書きやすくする。
インターフェイスもクラスのようにメソッドの引数に渡すことが出来る。

呼び出す違いはインスタンスの型に応じて。
インターフェイスはif文の代わりとなる。
呼び出し側のコードの重複を排除する仕組み。

インターフェイスを利用する場合は未実装をなくすこと。未実装のままだとエラーになる。

抽象クラスはクラス内の一部のメソッドを抽象メソッドにしたクラス。
例えば図形で共通のフィールドやメソッドを定義したい場合に抽象クラスが利用できる。

一応プログラム的にはポリモーフィズムは具体クラスにも適用できる。
オブジェクトもインターフェイスも子から親への型変換は暗黙的に実施される。
親から子への型変換はキャストが必要。子から子への型変換はできない。

Javaのエラーはエラー、実行時例外、例外に分けられる。
・エラー
深刻なエラー。プログラムで回復することはほぼ不可能。
・Exception
アプリケーションのエラー。
・RuntimeException
コンパイラによるチャックは行われない。
実行時に例外が発生すると発生するエラー。
例外処理は自分でも作ることが出来る。

アサーションでエラーが発生したときのメッセージが変更できる。
基本はオフになっているので-eaオプションを付ける必要がある。

メモリが足りなくなってプログラムが暴走する可能性があるので、
メモリーリーク対策としてガベージコレクションがある。
ガベージコレクションは自動で行われる。

列挙型は定数の集合を扱うための型。
enumを利用して実装する。
列挙型には色々なメソッドがある。

列挙型にはコンストラクタやフィールド、メソッドも定義できる。

他のクラスのstaticフィールドやメソッドをインポートできる。
