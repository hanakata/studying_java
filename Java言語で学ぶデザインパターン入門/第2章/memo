第2章 一皮かぶせて再利用

Adapterパターン
例えば直流12ボルトで動くノートパソコンを交流100ボルトのAC電源につなげるとき
ACアダプターという装置を使って変換させる。
提供されているものと必要なものの間に入ってその間を埋めることがアダプターの仕事。

プログラムの世界でも既に提供されているものがそのまま使えないときに
必要な形に変換してから利用することがある。
→これをAdapterパターンと呼ぶ。
Adapterパターン＝Wrapperパターンと呼ぶこともある。
Adapterパターンには以下2種類
・クラスによるAdapterパターン（継承
・インスタンスによるAdapterパターン（委譲

・クラスによるAdapterパターン（継承
あらかじめ提供されているクラスとしてBannerクラスを用意。(Banner.java)
これには文字列をカッコでくくって表示したり*印をつけて表示したりするメソッドが用意されている。
Bannerクラスを使ってPrintインターフェースを満たすようなクラスを作ることが今回の目的。
アダプターの役割を担うのがPrintBannerクラス(PrintBanner.java
このクラスは提供されているBannerクラスを継承し必要とされているPrintインターフェースを実装する。

Print.javaはPrintインターフェースが必要とされているインターフェースを実装
PrintBanner.javaがアダプターの役割を果たす。
用意されているBannerクラスを拡張してshowWithParenとshowWithAsterを継承する。
また要求されているPrintインターフェースを実装してprintWeakメソッドとprintStrongを実装する。

ここでMainクラスの中ではPrintBannerのインスタンスをPrintインタフェースの変数に代入していることに注意。
このMainクラスはあくまでPrintというインタフェースを使ってプログラミングをしている。

・インスタンスによるAdapterパターン（委譲
今度は委譲。委譲とはあるメソッドの処理を他のインスタンスのメソッドに任せること。
MainクラスとBannerクラスは継承のときと同じ。Printはインタフェースではなくクラスであると仮定する。
Javaでは2つのクラスを同時に継承することはできない。
なのでPrintBannerクラスをPrintとBannerの両方のサブクラスとして定義することはできない。
PrintBannerクラスはbannerフィールドでBannerクラスのインスタンスを保持する。
このインスタンスはPrintBannerクラスのコンストラクタで生成する。
printWeakおよびprintStrongメソッドではbannerフィールドを介してshowWithParen、showWithAsterメソッドを呼び出す。
printBannerクラスのprintWeakメソッドが呼ばれたとき自身で処理をすることなく
別のインスタンス（Bannerのインスタンス）のshowWithParenに任せているので委譲となる。

Atapterパターンの登場人物は以下の通り
・Targetの役
　いま必要となっているメソッドを定める役。ノートパソコンを動かすための直流12ボルト。
・Cliertの役
　Target役のメソッドを使って仕事をする役。直流12ボルトで動くノートパソコン
・Adapteeの役
　既に用意されているメソッドを持っている役。
・Adapterの役
　Adaptee役のメソッドを使ってTarget役を満たそうとするのがAdapter役の仕事

どんな時に使うか
0からプログラムを作ることは少なく既に存在しているクラスを利用することが多々ある。
そのクラスが十分にテストされているものであればなおさら使うべき。
そういったクラスを利用して必要とするメソッド群を素早く作ることができる。
バグが出てもAdapter役側に出ることになるので調査も楽。
また既存のクラスの仕様だけ分かれば新しいクラスが作成できるので
十分にテストされたクラスを修正してテスト箇所を増やすこともない。

バージョンアップと互換性として古いバージョンと新しいバージョンを共存させて
メンテナンスを楽に行えるようになるのもAdapterの役割。

練習問題解答
PrintBannerクラスのインスタンスを作るときにPrint型の変数に代入しているが
PrintBanner型の変数に代入しない理由は？
PrintBanner型にすると結びつきが強くなりすぎてしまうから？
Printインタフェースのメソッドだけを使うという点を強調したかったから
