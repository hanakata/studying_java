第3章 具体的な処理をサブクラスにまかせる

Template Methodパターン
テンプレートとは何か？
テンプレートというのは文字の形に穴が開いている薄いプラスチックの板のこと。

Template Methodパターンとは何か？
テンプレートの機能を持つパターン。
スーパークラスの方にテンプレートとなるメソッドが定義されている。
そのメソッドの定義の中では抽象メソッドが使われているため
スーパークラスを読んでいるだけでは実際の動作は不明。分かるのは抽象メソッドをどう呼んでいるかだけ。
スーパークラスで処理の枠組みを定め、サブクラスでその具体的な内容を定めるようなデザインパターンを
Template Methodパターンと呼ぶ。

サンプルプログラム
文字や文字列を5回繰り返して表示するというものを作成する。

AbstractDisplayクラス
AbstractDisplayクラスはopen、print、close、displayというメソッドを持つ。
このうちopen、print、closeは抽象メソッドでdisplayのみ実装されている。

CharDisplayクラス
AbstractDisplayクラスで抽象メソッドになっているopen、print、closeがすべて実装されている。

StringDisplayクラス
StringDisplayクラスでもopen、print、closeが実装されている。
CharDisplayクラスとは表示され方が違う。

Mainクラス
動作テストを行うもの

Template Methodパターンの登場人物
・AbstractClassの役
AbstractClassの役はテンプレートメソッドを実装しテンプレートメソッドで使っている抽象メソッドを宣言する。
・ConctreteClass
AbstractClassで定義されている抽象メソッドを具体的に実装する。

どんなメリットがあるか
・ロジックが共通化できる。
・スーパークラスとサブクラスの連携プレーが可能
・サブクラスをスーパークラスと同一視する

スーパークラスからサブクラスへの要請
クラス階層を学ぶときたいていはサブクラスの視点で考えてします
・スーパークラスで定義されているメソッドがサブクラスで利用できる
・サブクラスに少しメソッドを書くだけで新しい機能が追加できる
・サブクラスでメソッドをオーバーライドすればふるまいを変更できる。
ちょっと視点を変えてスーパークラスの気持ちになったとき、
スーパークラスで抽象メソッドが宣言されていればメソッドの実装はサブクラスに任せられている。
ということは
・サブクラスがそのメソッドを実装することを期待すうｒ
・サブクラスに対してそのメソッドの実装を要請する

抽象クラスの意義
抽象クラスはインスタンスを作ることができない。
ただ抽象クラスの段階で処理の流れを作るのに使う。

問題3-1
サブクラスで実装することが要請されているのはjava.io.InputStreamのreadメソッド
問題3-2
displayメソッドをオーバライドさせないようにするため
問題3-3
AbstractDisplayクラスでopen、print、closeメソッドをprotected宣言すると
継承関係にあるサブクラスからは呼び出せるがほかのパッケージにあるクラスからは呼び出せない。
問題3-4
Template MethodパターンのAbstractClass役は処理の骨組みを実装しなければならない。
抽象クラスであれば一部のメソッドを具体的に実装できる。
インターフェイスではすべてのメソッドが抽象メソッドでなければならない。