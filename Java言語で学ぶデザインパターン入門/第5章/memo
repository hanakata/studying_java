第5章 たった1つのインスタンス

Singletonパターン
プログラムを動かすとき普通はたくさんのインスタンスが作成される。
→たとえば文字列を表すjava.lang.Stringクラスのインスタンスは文字列1個に対して1つのインスタンスができる。
ただこのクラスのインスタンスは1つしか作らないし作りたくないという場合もある
→例えばシステムの中に1個しか存在しないものをプログラムで表現したいとき。
　コンピュータそのものを表現したクラスや設定など。
注意深くプログラミングすれば可能だがそもそもそういう意味ではなく
・指定したクラスのインスタンスが絶対に1個しか存在しないことを保証したい
・インスタンスが1個しか存在しないことをプログラム上で表現したい
場合に利用するパターンをSingletonパターンと呼ぶ。

Singletonクラス
このクラスではインスタンスは1つしか作られない。
Singletonクラスではstaticフィールドとしてsingletonが定義され初期化されている。
Singletonクラスのコンストラクタはprivateになっているため
クラス外から呼び出すことはできない。
Singletonクラスの唯一のインスタンスを得るメソッドとしてgetが容易されている。

Mainクラス
このクラスはSingletonクラスを利用しているクラス。

登場人物
・Singletonの役
SingletonパターンはSingletonの役しか登場しない。
Singletonの役は唯一のインスタンスを得るためのstaticメソッドを持っている。

なぜ制限を設ける可能性があるのか
制限を課す＝前提になる条件を増やすということ

唯一のインスタンスはいつ生成されているのか
プログラム実行後、最初にgetInstanesメソッドを呼び出したときsingletonクラスは初期化される。
その時にstaticフィールドの初期化が行われインスタンスが作られる。

