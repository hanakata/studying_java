第4章 インスタンス作成をサブクラスに任せる

Factory Methodパターン
Template Methodパターンではスーパークラス側で処理の骨組みを作りサブクラス側で
具体的な処理の肉付けを行った。
このパターンをインスタンス生成の場面で適用したものがFactory Methodパターン。
Factory Methodパターンではインスタンスの作り方をスーパークラスの側で定めるが
具体的なクラス名までは定めない。具体的な肉付けはすべてサブクラスの側で行う。
これによってインスタンス生成のための枠組みと実際のインスタンス生成のクラスを分けることができる。

Productクラス
frameworkパッケージのproductクラスは製品を体現したクラス。
このクラスでは中小メソッドのuseのみが宣言されている。
具体的なuseの実装はすべてProductのサブクラスに任せている。

Factoryクラス
frameworkパッケージのfactoryクラスではTemplate Methodパターンが使われている。
抽象メソッドcreateProductで製品を作り作った製品を抽象メソッドregisterProductで登録する。
製品を作ると登録の実装はサブクラスで行う。

IDCardクラス
idcardパッケージは肉付けをする側。
フレームワークから分離することを明示するためにidcardパッケージという別のパッケージにする。

IDCardFactoryクラス
IDCardFactoryクラスではcreateProductとregisterProductの2つのメソッドを実装してる。
createProductではIDCardのインスタンスを生成することで製品を作ることを実際に実現する。
registerProductではIDCardのownerをownersフィールドに追加して登録という機能を実現する。

Mainクラス
動かす用。

Factory Methodパターンの登場人物
・Productの役
これはフレームワーク側。このパターンで生成されるインスタンスが持つべきインターフェースを定める抽象クラス
・Creatorの役
これはフレームワーク側。Product役を生成する抽象クラス。
Creator役は実際に生成するConcreteProduct役については何も知らない。
・ConcreteProduct役
具体的な肉付けをする側。具体的な製品を定める。
・ConcreteCreatorの役
具体的な肉付けをする側。具体的な製品を作るクラスを定める。

フレームワークと肉付け
frameworkパッケージとidcardパッケージと分けることでフレームワークと肉付けで分かれる。
重要なのはframeworkパッケージの中身を修正することなく別の製品を作れるということ。

インスタンス生成
サンプルプログラムではFactoryクラスのcreateProductメソッドは抽象メソッドになっている。
つまりこのメソッドはサブクラスで実装することが期待されている。
createProductメソッドの記述方法は以下の3通りが考えられる。
・抽象メソッドにする
抽象メソッドにするとサブクラスは必ずこのメソッドを実装しなければならなくなる。
・デフォルトの実装を用意しておく
デフォルトの実装を用意する方法。デフォルトの実装を用意しておくとサブクラスで
実装しなかった場合にはその実装が使われる。
・エラーにする。
デフォルトの実装をエラーにしておくとサブクラスで実装しなかった場合には実行時にエラーになる。

問題4-1
idcardパッケージ外からnewを使って生成できないことを表す
問題4-3
Javaではabstractなコンストラクタを作ることができないから。