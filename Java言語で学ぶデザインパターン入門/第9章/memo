第9章 機能の階層と実装の階層を分ける

Bridgeパターン
Bridgeパターンとは2つの場所を結びつける役割を果たしている。


クラス階層の2つの役割
新しい機能を追加したいとき
・スーパークラスは基本的な機能を持っている
・サブクラスで新しい機能を追加する
→これを機能のクラス階層と呼ぶことにする。

新しい実装を追加したいとき
・スーパークラスは抽象メソッドによってインターフェースを規定している
・サブクラスは具象メソッドによってそのインターフェイスを実装する
→これを実装のクラス階層と呼ぶことにする

クラス階層の混在と分離
サブクラスを作ろうとしたとき機能を追加しようとしているのか実装を行おうとしているのかを
確認する必要がある。
両方が混在していると複雑になり見通しが悪くなるので分けるべき。

機能のクラス階層：Displayクラス
抽象的な何かを表示するもの。機能のクラス階層としては最上位にあるクラス。

機能のクラス階層：CountDisplayクラス
Displayクラスに機能を追加したものがこのクラス。

実装のクラス階層：Displayimplクラス
このクラスは実装のクラス階層の最上位に位置する。

実装のクラス階層：StringDisplayImplクラス
このクラスは文字列を表示するクラス

Bridgeパターンの登場人物
・Abstractionの役
機能のクラス階層の最上位クラス
・RefineAbstractionの役
Abstractionに対して機能を追加したクラス
・Implementorの役
実装のクラス階層の最上位クラス
・ConcreteImplementorの役
具体的にImplementor役のインターフェースを実装する