チャットクライアントを作成する。
チャットクライアントがすべきことは以下
・サーバとの間の接続を確立する
・サーバにメッセージを送信する
・サーバからメッセージを受信する
基本的に低水準の処理を行うためのクラスはあるのでこまごましたものは実施する必要がない。
ネットワーク接続を行うにはSocketクラスを利用する。

ソケット接続経由でのデータの読み取りにもBufferedReaderが使用できる。
データの書き込みはprintWriterを利用する。
データの送信と受信を同時にやりたいならスレッドという考え方が必要になる。

スレッドの流れは
オブジェクト作成→処理待ち→処理実行となる。
作成しただけでは処理は出来ない。

スレッドは思ったような順番で動かないことも多い。
sleepを使えばある程度はコントロールできる。
スレッドには名前を付けることも可能。

同時に複数のスレッドを動作させると競合という現象が発生しデータの破壊に繋がる可能性がある。
名前をつけてそれぞれのスレッドに対応するrunメソッドで残高の確認と引き出しを行うことで解決する可能性はある。
ただしそれを行っても問題は起こるのでオブジェクトへのアクセスにはロックをかけること。
メソッドに対して同時にアクセスできるスレッドの数と指定する。
オブジェクトには全てロックの概念が存在しているが、そもそも全て開錠されている状態になっているので
意味を成していない。
またスレッドを使うことで更新が無効になるという現象も発生する。
その場合incrementメソッドをsynchronized宣言する。