クラスの中にはインスタンス化すべきでないものもある。
ライオンや狼など明確になっている動物はオブジェクトを
作成すべきだが動物というような大きな枠のものについてはオブジェクトにすべきではなく
継承させる前提でクラスを作成すべき。つまりインスタンス化しないほうが良い。
そういったクラスをインスタンス化しない方法としてabstractというものがある。

抽象クラスは何があってもインスタンス化することは出来ない。
抽象クラスはインスタンス化しても全く意味のないもの。ただ継承するだけ。

メソッドも抽象化することは出来る。ひとつでもメソッドを抽象化したクラスは
抽象化する必要がある。

例えばリストを作成する際、犬と猫のそれぞれのリストを作成する必要がある場合、
Animalリストというリストクラスを作成しそれを利用してそれぞれのリストを
作成していく方が優れたやり方とされている。

明示的に何かのクラスを継承していないクラスは自動的にObjectを継承していることとなる。
Objectは究極のスーパークラス
なので全てのクラスはObjectクラスの特性、機能を受け継ぐ。
継承を多重に行うことはできない。
そういったことをやりたい場合はインターフェースを利用する。
インターフェースは全てのメソッドが抽象メソッドとなる。
サブクラスでそれぞれのメソッドの本体を書く必要がある。

独立したクラス、サブクラス、抽象クラス、インターフェースのうちどれを作るかの判断
・既存のクラスのいずれともIS-A関係にならないクラスは独立したクラスにする。
・既存のクラスをより具体的なものにすれば済むならクラスを継承したサブクラスを作ったり
  メソッドをオーバーライドしたりメソッド追加したり。
・基本的な部分が共通したクラスを複数作る必要があれば抽象クラスをつくる。
・プログラムの中で同じ役割を果たすクラスを複数作る必要がある場合はインターフェースをつくる。